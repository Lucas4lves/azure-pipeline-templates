parameters:
  # Nome da aplicação no servidor do SonarQube
  project_key: '' 
  # Token de Acesso do SonarQube
  sonar_token: ''
  # Caminho para o Dockefile do Sonar
  dockefile_path: ''
  # Apenas para a stack 'nodejs', 
  sonar_settings_path: ''
  # Contexto de build, atentar para a estrutura do repositório
  build_context: ''
  # Comando Docker, só precisamos buildar a imagem da análise
  command: 'build'
  # Container Registry da Área de Projeto
  registry: 'nexus'
  # Tipo: string | Valores aceitos: 'dotnet', 'nodejs'
  stack: 'dotnet'

stages:
- stage: Stage_1
  displayName: 'Quality'
  jobs:
  - job: Job_1
    displayName: 'SonarQube Analysis on Docker'
    steps:
    - checkout: self
      clean: False
    - task: 'Docker@2'
      displayName: 'Sonar Scanner for dotnet'
      condition: and(eq(parameters.stack, 'dotnet'))
      inputs:
        containerRegistry: ''
        command: ${{ parameters.command }}
        Dockerfile: ${{ parameters.dockerfile_path }}

  - job: Job_2
    displayName: 'SonarQube Analysis on Docker'
    steps:
    - checkout: self
      clean: False
    - task: 'Docker@2'
      displayName: 'Sonar Scanner for Node Js'
      condition: and(eq(parameters.stack, 'nodejs'))
      inputs:
        containerRegistry: ''
        command: ${{ parameters.command }}
        Dockerfile: ${{ parameters.dockerfile_path }}
  - job: Job_3
    displayName: 'Trivy Image scan'
    steps:
      - task: 'Trivy@3' 
